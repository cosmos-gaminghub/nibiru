// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/wasm_message.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameNftDenomIssueMessage struct {
	Nft *NftDenomIssueMessage `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *GameNftDenomIssueMessage) Reset()         { *m = GameNftDenomIssueMessage{} }
func (m *GameNftDenomIssueMessage) String() string { return proto.CompactTextString(m) }
func (*GameNftDenomIssueMessage) ProtoMessage()    {}
func (*GameNftDenomIssueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{0}
}
func (m *GameNftDenomIssueMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNftDenomIssueMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNftDenomIssueMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNftDenomIssueMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNftDenomIssueMessage.Merge(m, src)
}
func (m *GameNftDenomIssueMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameNftDenomIssueMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNftDenomIssueMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameNftDenomIssueMessage proto.InternalMessageInfo

func (m *GameNftDenomIssueMessage) GetNft() *NftDenomIssueMessage {
	if m != nil {
		return m.Nft
	}
	return nil
}

type NftDenomIssueMessage struct {
	IssueDenom *DenomIssueMessage `protobuf:"bytes,1,opt,name=issue_denom,json=issueDenom,proto3" json:"issue_denom,omitempty"`
}

func (m *NftDenomIssueMessage) Reset()         { *m = NftDenomIssueMessage{} }
func (m *NftDenomIssueMessage) String() string { return proto.CompactTextString(m) }
func (*NftDenomIssueMessage) ProtoMessage()    {}
func (*NftDenomIssueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{1}
}
func (m *NftDenomIssueMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftDenomIssueMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftDenomIssueMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftDenomIssueMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftDenomIssueMessage.Merge(m, src)
}
func (m *NftDenomIssueMessage) XXX_Size() int {
	return m.Size()
}
func (m *NftDenomIssueMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NftDenomIssueMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NftDenomIssueMessage proto.InternalMessageInfo

func (m *NftDenomIssueMessage) GetIssueDenom() *DenomIssueMessage {
	if m != nil {
		return m.IssueDenom
	}
	return nil
}

type DenomIssueMessage struct {
	DenomId string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Schema  string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty" yaml:"schema"`
}

func (m *DenomIssueMessage) Reset()         { *m = DenomIssueMessage{} }
func (m *DenomIssueMessage) String() string { return proto.CompactTextString(m) }
func (*DenomIssueMessage) ProtoMessage()    {}
func (*DenomIssueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{2}
}
func (m *DenomIssueMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomIssueMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomIssueMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomIssueMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomIssueMessage.Merge(m, src)
}
func (m *DenomIssueMessage) XXX_Size() int {
	return m.Size()
}
func (m *DenomIssueMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomIssueMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DenomIssueMessage proto.InternalMessageInfo

func (m *DenomIssueMessage) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *DenomIssueMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DenomIssueMessage) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type GameNftMintMessage struct {
	Nft *NftMintMessage `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *GameNftMintMessage) Reset()         { *m = GameNftMintMessage{} }
func (m *GameNftMintMessage) String() string { return proto.CompactTextString(m) }
func (*GameNftMintMessage) ProtoMessage()    {}
func (*GameNftMintMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{3}
}
func (m *GameNftMintMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNftMintMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNftMintMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNftMintMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNftMintMessage.Merge(m, src)
}
func (m *GameNftMintMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameNftMintMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNftMintMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameNftMintMessage proto.InternalMessageInfo

func (m *GameNftMintMessage) GetNft() *NftMintMessage {
	if m != nil {
		return m.Nft
	}
	return nil
}

type NftMintMessage struct {
	MintNft *MintMessage `protobuf:"bytes,1,opt,name=mint_nft,json=mintNft,proto3" json:"mint_nft,omitempty"`
}

func (m *NftMintMessage) Reset()         { *m = NftMintMessage{} }
func (m *NftMintMessage) String() string { return proto.CompactTextString(m) }
func (*NftMintMessage) ProtoMessage()    {}
func (*NftMintMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{4}
}
func (m *NftMintMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftMintMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftMintMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftMintMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftMintMessage.Merge(m, src)
}
func (m *NftMintMessage) XXX_Size() int {
	return m.Size()
}
func (m *NftMintMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NftMintMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NftMintMessage proto.InternalMessageInfo

func (m *NftMintMessage) GetMintNft() *MintMessage {
	if m != nil {
		return m.MintNft
	}
	return nil
}

type MintMessage struct {
	DenomId   string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	URI       string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty" yaml:"uri"`
	Data      string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty" yaml:"data"`
	Recipient string `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
}

func (m *MintMessage) Reset()         { *m = MintMessage{} }
func (m *MintMessage) String() string { return proto.CompactTextString(m) }
func (*MintMessage) ProtoMessage()    {}
func (*MintMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{5}
}
func (m *MintMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintMessage.Merge(m, src)
}
func (m *MintMessage) XXX_Size() int {
	return m.Size()
}
func (m *MintMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MintMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MintMessage proto.InternalMessageInfo

func (m *MintMessage) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *MintMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MintMessage) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *MintMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MintMessage) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type GameNftEditMessage struct {
	Nft *NftEditMessage `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *GameNftEditMessage) Reset()         { *m = GameNftEditMessage{} }
func (m *GameNftEditMessage) String() string { return proto.CompactTextString(m) }
func (*GameNftEditMessage) ProtoMessage()    {}
func (*GameNftEditMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{6}
}
func (m *GameNftEditMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNftEditMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNftEditMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNftEditMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNftEditMessage.Merge(m, src)
}
func (m *GameNftEditMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameNftEditMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNftEditMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameNftEditMessage proto.InternalMessageInfo

func (m *GameNftEditMessage) GetNft() *NftEditMessage {
	if m != nil {
		return m.Nft
	}
	return nil
}

type NftEditMessage struct {
	EditNft *EditMessage `protobuf:"bytes,1,opt,name=edit_nft,json=editNft,proto3" json:"edit_nft,omitempty"`
}

func (m *NftEditMessage) Reset()         { *m = NftEditMessage{} }
func (m *NftEditMessage) String() string { return proto.CompactTextString(m) }
func (*NftEditMessage) ProtoMessage()    {}
func (*NftEditMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{7}
}
func (m *NftEditMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftEditMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftEditMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftEditMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftEditMessage.Merge(m, src)
}
func (m *NftEditMessage) XXX_Size() int {
	return m.Size()
}
func (m *NftEditMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NftEditMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NftEditMessage proto.InternalMessageInfo

func (m *NftEditMessage) GetEditNft() *EditMessage {
	if m != nil {
		return m.EditNft
	}
	return nil
}

type EditMessage struct {
	DenomId string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty" yaml:"data"`
}

func (m *EditMessage) Reset()         { *m = EditMessage{} }
func (m *EditMessage) String() string { return proto.CompactTextString(m) }
func (*EditMessage) ProtoMessage()    {}
func (*EditMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{8}
}
func (m *EditMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditMessage.Merge(m, src)
}
func (m *EditMessage) XXX_Size() int {
	return m.Size()
}
func (m *EditMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EditMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EditMessage proto.InternalMessageInfo

func (m *EditMessage) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *EditMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EditMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EditMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GameNftTransferMessage struct {
	Nft *NftTransferMessage `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *GameNftTransferMessage) Reset()         { *m = GameNftTransferMessage{} }
func (m *GameNftTransferMessage) String() string { return proto.CompactTextString(m) }
func (*GameNftTransferMessage) ProtoMessage()    {}
func (*GameNftTransferMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{9}
}
func (m *GameNftTransferMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNftTransferMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNftTransferMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNftTransferMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNftTransferMessage.Merge(m, src)
}
func (m *GameNftTransferMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameNftTransferMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNftTransferMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameNftTransferMessage proto.InternalMessageInfo

func (m *GameNftTransferMessage) GetNft() *NftTransferMessage {
	if m != nil {
		return m.Nft
	}
	return nil
}

type NftTransferMessage struct {
	TransferNft *TransferMessage `protobuf:"bytes,1,opt,name=transfer_nft,json=transferNft,proto3" json:"transfer_nft,omitempty"`
}

func (m *NftTransferMessage) Reset()         { *m = NftTransferMessage{} }
func (m *NftTransferMessage) String() string { return proto.CompactTextString(m) }
func (*NftTransferMessage) ProtoMessage()    {}
func (*NftTransferMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{10}
}
func (m *NftTransferMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftTransferMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftTransferMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftTransferMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftTransferMessage.Merge(m, src)
}
func (m *NftTransferMessage) XXX_Size() int {
	return m.Size()
}
func (m *NftTransferMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NftTransferMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NftTransferMessage proto.InternalMessageInfo

func (m *NftTransferMessage) GetTransferNft() *TransferMessage {
	if m != nil {
		return m.TransferNft
	}
	return nil
}

type TransferMessage struct {
	DenomId   string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
}

func (m *TransferMessage) Reset()         { *m = TransferMessage{} }
func (m *TransferMessage) String() string { return proto.CompactTextString(m) }
func (*TransferMessage) ProtoMessage()    {}
func (*TransferMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{11}
}
func (m *TransferMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferMessage.Merge(m, src)
}
func (m *TransferMessage) XXX_Size() int {
	return m.Size()
}
func (m *TransferMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TransferMessage proto.InternalMessageInfo

func (m *TransferMessage) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *TransferMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TransferMessage) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type GameNftBurnMessage struct {
	Nft *NftBurnMessage `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *GameNftBurnMessage) Reset()         { *m = GameNftBurnMessage{} }
func (m *GameNftBurnMessage) String() string { return proto.CompactTextString(m) }
func (*GameNftBurnMessage) ProtoMessage()    {}
func (*GameNftBurnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{12}
}
func (m *GameNftBurnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNftBurnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNftBurnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNftBurnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNftBurnMessage.Merge(m, src)
}
func (m *GameNftBurnMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameNftBurnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNftBurnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameNftBurnMessage proto.InternalMessageInfo

func (m *GameNftBurnMessage) GetNft() *NftBurnMessage {
	if m != nil {
		return m.Nft
	}
	return nil
}

type NftBurnMessage struct {
	BurnNft *BurnMessage `protobuf:"bytes,1,opt,name=burn_nft,json=burnNft,proto3" json:"burn_nft,omitempty"`
}

func (m *NftBurnMessage) Reset()         { *m = NftBurnMessage{} }
func (m *NftBurnMessage) String() string { return proto.CompactTextString(m) }
func (*NftBurnMessage) ProtoMessage()    {}
func (*NftBurnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{13}
}
func (m *NftBurnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftBurnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftBurnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftBurnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftBurnMessage.Merge(m, src)
}
func (m *NftBurnMessage) XXX_Size() int {
	return m.Size()
}
func (m *NftBurnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NftBurnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NftBurnMessage proto.InternalMessageInfo

func (m *NftBurnMessage) GetBurnNft() *BurnMessage {
	if m != nil {
		return m.BurnNft
	}
	return nil
}

type BurnMessage struct {
	DenomId string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *BurnMessage) Reset()         { *m = BurnMessage{} }
func (m *BurnMessage) String() string { return proto.CompactTextString(m) }
func (*BurnMessage) ProtoMessage()    {}
func (*BurnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f267daf04bac102, []int{14}
}
func (m *BurnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnMessage.Merge(m, src)
}
func (m *BurnMessage) XXX_Size() int {
	return m.Size()
}
func (m *BurnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BurnMessage proto.InternalMessageInfo

func (m *BurnMessage) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *BurnMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*GameNftDenomIssueMessage)(nil), "cosmosgaminghub.nibiru.nft.GameNftDenomIssueMessage")
	proto.RegisterType((*NftDenomIssueMessage)(nil), "cosmosgaminghub.nibiru.nft.NftDenomIssueMessage")
	proto.RegisterType((*DenomIssueMessage)(nil), "cosmosgaminghub.nibiru.nft.DenomIssueMessage")
	proto.RegisterType((*GameNftMintMessage)(nil), "cosmosgaminghub.nibiru.nft.GameNftMintMessage")
	proto.RegisterType((*NftMintMessage)(nil), "cosmosgaminghub.nibiru.nft.NftMintMessage")
	proto.RegisterType((*MintMessage)(nil), "cosmosgaminghub.nibiru.nft.MintMessage")
	proto.RegisterType((*GameNftEditMessage)(nil), "cosmosgaminghub.nibiru.nft.GameNftEditMessage")
	proto.RegisterType((*NftEditMessage)(nil), "cosmosgaminghub.nibiru.nft.NftEditMessage")
	proto.RegisterType((*EditMessage)(nil), "cosmosgaminghub.nibiru.nft.EditMessage")
	proto.RegisterType((*GameNftTransferMessage)(nil), "cosmosgaminghub.nibiru.nft.GameNftTransferMessage")
	proto.RegisterType((*NftTransferMessage)(nil), "cosmosgaminghub.nibiru.nft.NftTransferMessage")
	proto.RegisterType((*TransferMessage)(nil), "cosmosgaminghub.nibiru.nft.TransferMessage")
	proto.RegisterType((*GameNftBurnMessage)(nil), "cosmosgaminghub.nibiru.nft.GameNftBurnMessage")
	proto.RegisterType((*NftBurnMessage)(nil), "cosmosgaminghub.nibiru.nft.NftBurnMessage")
	proto.RegisterType((*BurnMessage)(nil), "cosmosgaminghub.nibiru.nft.BurnMessage")
}

func init() { proto.RegisterFile("nft/wasm_message.proto", fileDescriptor_8f267daf04bac102) }

var fileDescriptor_8f267daf04bac102 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0xeb, 0xa6, 0x7f, 0x93, 0x5c, 0xff, 0xa5, 0xd4, 0x94, 0x2a, 0xaa, 0x20, 0x46, 0x66,
	0x51, 0x28, 0xaa, 0x4d, 0xcb, 0x0e, 0xb1, 0x40, 0x16, 0x08, 0xba, 0x68, 0x16, 0x56, 0xd9, 0x54,
	0x88, 0x68, 0x12, 0x8f, 0xdd, 0x91, 0xea, 0x99, 0xe0, 0x19, 0x03, 0x7d, 0x0b, 0x24, 0x78, 0x06,
	0x9e, 0x85, 0x65, 0x97, 0xac, 0x2c, 0x94, 0xf2, 0x04, 0x79, 0x02, 0x34, 0x33, 0x49, 0x3b, 0xa4,
	0x25, 0x4d, 0xab, 0xb2, 0x1b, 0xcf, 0x3d, 0xf7, 0xbb, 0x57, 0xe7, 0x8c, 0x64, 0x58, 0xa1, 0x89,
	0x08, 0x3e, 0x22, 0x9e, 0xb5, 0x33, 0xcc, 0x39, 0x4a, 0xb1, 0xdf, 0xcb, 0x99, 0x60, 0xce, 0x6a,
	0x97, 0xf1, 0x8c, 0xf1, 0x14, 0x65, 0x84, 0xa6, 0xfb, 0x45, 0xc7, 0xa7, 0xa4, 0x43, 0xf2, 0xc2,
	0xa7, 0x89, 0x58, 0x5d, 0x4e, 0x59, 0xca, 0x94, 0x2c, 0x90, 0x27, 0xdd, 0xb1, 0x7a, 0x27, 0x65,
	0x2c, 0x3d, 0xc0, 0x01, 0xea, 0x91, 0x00, 0x51, 0xca, 0x04, 0x12, 0x84, 0x51, 0x3e, 0xac, 0xae,
	0x6b, 0x5e, 0xd0, 0x41, 0x1c, 0x07, 0xef, 0x0b, 0x9c, 0x1f, 0x06, 0x1f, 0x36, 0x3b, 0x58, 0xa0,
	0xcd, 0xa0, 0x87, 0x52, 0x42, 0x95, 0x58, 0x6b, 0xbd, 0x77, 0xd0, 0x78, 0x85, 0x32, 0xdc, 0x4a,
	0xc4, 0x0b, 0x4c, 0x59, 0xb6, 0xcd, 0x79, 0x81, 0x77, 0xf4, 0x76, 0x4e, 0x08, 0x15, 0x9a, 0x88,
	0x86, 0x75, 0xcf, 0x7a, 0x60, 0x6f, 0x3d, 0xf6, 0xff, 0xbe, 0xa5, 0x7f, 0x5e, 0x7b, 0x24, 0x9b,
	0xbd, 0x04, 0x96, 0xcf, 0x65, 0xb7, 0xc0, 0x26, 0xf2, 0xbb, 0x1d, 0xcb, 0xd2, 0x70, 0xc6, 0xc6,
	0xa4, 0x19, 0x67, 0x07, 0x80, 0x22, 0xa8, 0x7b, 0xef, 0x8b, 0x05, 0x4b, 0x67, 0xa7, 0xf8, 0x50,
	0x53, 0xfc, 0x36, 0x89, 0xd5, 0x88, 0x7a, 0x78, 0x6b, 0x50, 0xba, 0x8b, 0x87, 0x28, 0x3b, 0x78,
	0xea, 0x8d, 0x2a, 0x5e, 0x54, 0x55, 0xc7, 0xed, 0xd8, 0xb9, 0x0f, 0x73, 0x14, 0x65, 0xb8, 0x31,
	0xab, 0xb4, 0x8b, 0x83, 0xd2, 0xb5, 0xb5, 0x56, 0xde, 0x7a, 0x91, 0x2a, 0x3a, 0x0f, 0x61, 0x9e,
	0x77, 0xf7, 0x71, 0x86, 0x1a, 0x15, 0x25, 0x5b, 0x1a, 0x94, 0xee, 0x82, 0x96, 0xe9, 0x7b, 0x2f,
	0x9a, 0x1f, 0x1d, 0xc0, 0x19, 0xba, 0xbb, 0x43, 0xa8, 0x18, 0x6d, 0xf5, 0xcc, 0xf4, 0x75, 0xfd,
	0x02, 0x5f, 0x8d, 0x46, 0xed, 0xe8, 0x2e, 0xdc, 0x18, 0xe3, 0x85, 0x50, 0xcb, 0x08, 0x15, 0xed,
	0x53, 0xe8, 0xda, 0x24, 0xa8, 0x49, 0xac, 0xca, 0xc6, 0x56, 0x22, 0xbc, 0x5f, 0x16, 0xd8, 0x26,
	0xf3, 0x9f, 0x38, 0xb7, 0x06, 0x95, 0x22, 0x27, 0x43, 0xdb, 0x6e, 0xf7, 0x4b, 0xb7, 0xf2, 0x26,
	0xda, 0x1e, 0x94, 0x2e, 0x68, 0x69, 0x91, 0x13, 0x2f, 0x92, 0x0a, 0x49, 0x8b, 0x91, 0x40, 0x8d,
	0xb9, 0x71, 0x9a, 0xbc, 0xf5, 0x22, 0x55, 0x74, 0xb6, 0xa0, 0x9e, 0xe3, 0x2e, 0xe9, 0x11, 0x4c,
	0x45, 0xe3, 0x3f, 0xa5, 0x5c, 0x1e, 0x94, 0xee, 0x4d, 0xad, 0x3c, 0x29, 0x79, 0x51, 0xdd, 0x38,
	0x9f, 0x04, 0xf2, 0x32, 0x26, 0x57, 0x0b, 0xc4, 0x68, 0x34, 0x03, 0x31, 0x79, 0x21, 0xd4, 0x70,
	0x4c, 0xa6, 0x0e, 0xc4, 0x24, 0x56, 0x65, 0xa3, 0x0c, 0xe4, 0x9b, 0x05, 0xb6, 0xc9, 0xbc, 0x6c,
	0x20, 0x77, 0x61, 0x96, 0xc4, 0x2a, 0x8e, 0xb9, 0x70, 0x61, 0x50, 0xba, 0x75, 0xad, 0x94, 0x9a,
	0x59, 0x72, 0x9a, 0x57, 0x65, 0x52, 0x5e, 0xd3, 0xc4, 0xe0, 0xed, 0xc1, 0xca, 0xd0, 0xd2, 0xdd,
	0x1c, 0x51, 0x9e, 0xe0, 0x7c, 0xb4, 0xf2, 0x73, 0xd3, 0x56, 0xff, 0x02, 0x5b, 0xc7, 0x9a, 0xb5,
	0xb5, 0x31, 0x38, 0xe7, 0x70, 0x5b, 0xf0, 0xbf, 0x18, 0x5e, 0x19, 0x16, 0x3f, 0x9a, 0x34, 0x60,
	0x9c, 0x6e, 0x8f, 0x00, 0xd2, 0xea, 0xaf, 0x16, 0x2c, 0x8e, 0xcf, 0xb8, 0x66, 0xbb, 0xff, 0x78,
	0xab, 0x95, 0xcb, 0xbe, 0xd5, 0xb0, 0xc8, 0xe9, 0x95, 0xde, 0xaa, 0xd1, 0x68, 0xbe, 0x55, 0x93,
	0x17, 0x42, 0xad, 0x53, 0xe4, 0x74, 0xda, 0xb7, 0x6a, 0x12, 0xab, 0xb2, 0x51, 0x1a, 0xf8, 0x16,
	0x6c, 0x13, 0x79, 0xbd, 0xde, 0x85, 0xaf, 0xbf, 0xf7, 0x9b, 0xd6, 0x51, 0xbf, 0x69, 0xfd, 0xec,
	0x37, 0xad, 0xcf, 0xc7, 0xcd, 0x99, 0xa3, 0xe3, 0xe6, 0xcc, 0x8f, 0xe3, 0xe6, 0xcc, 0x9e, 0x9f,
	0x12, 0x21, 0xf7, 0xeb, 0xb2, 0x2c, 0xd0, 0x3b, 0x6f, 0x9c, 0x2c, 0x1d, 0xe8, 0xa5, 0x83, 0x4f,
	0x81, 0xfc, 0xeb, 0x8a, 0xc3, 0x1e, 0xe6, 0x9d, 0x79, 0xf5, 0xcf, 0x7b, 0xf2, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x24, 0x01, 0x4e, 0x69, 0x89, 0x07, 0x00, 0x00,
}

func (m *GameNftDenomIssueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNftDenomIssueMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNftDenomIssueMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftDenomIssueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftDenomIssueMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftDenomIssueMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueDenom != nil {
		{
			size, err := m.IssueDenom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomIssueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomIssueMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomIssueMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameNftMintMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNftMintMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNftMintMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftMintMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftMintMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftMintMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintNft != nil {
		{
			size, err := m.MintNft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameNftEditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNftEditMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNftEditMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftEditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftEditMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftEditMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EditNft != nil {
		{
			size, err := m.EditNft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintWasmMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameNftTransferMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNftTransferMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNftTransferMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftTransferMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftTransferMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftTransferMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferNft != nil {
		{
			size, err := m.TransferNft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintWasmMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameNftBurnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNftBurnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNftBurnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftBurnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftBurnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftBurnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnNft != nil {
		{
			size, err := m.BurnNft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWasmMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmMessage(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameNftDenomIssueMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *NftDenomIssueMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueDenom != nil {
		l = m.IssueDenom.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *DenomIssueMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *GameNftMintMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *NftMintMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MintNft != nil {
		l = m.MintNft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *MintMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *GameNftEditMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *NftEditMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EditNft != nil {
		l = m.EditNft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *EditMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovWasmMessage(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *GameNftTransferMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *NftTransferMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferNft != nil {
		l = m.TransferNft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *TransferMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovWasmMessage(uint64(m.Id))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *GameNftBurnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *NftBurnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BurnNft != nil {
		l = m.BurnNft.Size()
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	return n
}

func (m *BurnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmMessage(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovWasmMessage(uint64(m.Id))
	}
	return n
}

func sovWasmMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmMessage(x uint64) (n int) {
	return sovWasmMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameNftDenomIssueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNftDenomIssueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNftDenomIssueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &NftDenomIssueMessage{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftDenomIssueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftDenomIssueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftDenomIssueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueDenom == nil {
				m.IssueDenom = &DenomIssueMessage{}
			}
			if err := m.IssueDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomIssueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomIssueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomIssueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNftMintMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNftMintMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNftMintMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &NftMintMessage{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftMintMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftMintMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftMintMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MintNft == nil {
				m.MintNft = &MintMessage{}
			}
			if err := m.MintNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNftEditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNftEditMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNftEditMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &NftEditMessage{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftEditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftEditMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftEditMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EditNft == nil {
				m.EditNft = &EditMessage{}
			}
			if err := m.EditNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNftTransferMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNftTransferMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNftTransferMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &NftTransferMessage{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftTransferMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftTransferMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftTransferMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferNft == nil {
				m.TransferNft = &TransferMessage{}
			}
			if err := m.TransferNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNftBurnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNftBurnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNftBurnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &NftBurnMessage{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftBurnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftBurnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftBurnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BurnNft == nil {
				m.BurnNft = &BurnMessage{}
			}
			if err := m.BurnNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWasmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmMessage = fmt.Errorf("proto: unexpected end of group")
)
