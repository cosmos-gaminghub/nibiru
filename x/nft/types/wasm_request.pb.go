// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/wasm_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftDenomRequest struct {
	Nft *DenomRequest `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *NftDenomRequest) Reset()         { *m = NftDenomRequest{} }
func (m *NftDenomRequest) String() string { return proto.CompactTextString(m) }
func (*NftDenomRequest) ProtoMessage()    {}
func (*NftDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d37e3479c5d69b, []int{0}
}
func (m *NftDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftDenomRequest.Merge(m, src)
}
func (m *NftDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *NftDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NftDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NftDenomRequest proto.InternalMessageInfo

func (m *NftDenomRequest) GetNft() *DenomRequest {
	if m != nil {
		return m.Nft
	}
	return nil
}

type DenomRequest struct {
	Denom *DenomQuery `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *DenomRequest) Reset()         { *m = DenomRequest{} }
func (m *DenomRequest) String() string { return proto.CompactTextString(m) }
func (*DenomRequest) ProtoMessage()    {}
func (*DenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d37e3479c5d69b, []int{1}
}
func (m *DenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomRequest.Merge(m, src)
}
func (m *DenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomRequest proto.InternalMessageInfo

func (m *DenomRequest) GetDenom() *DenomQuery {
	if m != nil {
		return m.Denom
	}
	return nil
}

type DenomQuery struct {
	DenomId string `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
}

func (m *DenomQuery) Reset()         { *m = DenomQuery{} }
func (m *DenomQuery) String() string { return proto.CompactTextString(m) }
func (*DenomQuery) ProtoMessage()    {}
func (*DenomQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d37e3479c5d69b, []int{2}
}
func (m *DenomQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomQuery.Merge(m, src)
}
func (m *DenomQuery) XXX_Size() int {
	return m.Size()
}
func (m *DenomQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DenomQuery proto.InternalMessageInfo

func (m *DenomQuery) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func init() {
	proto.RegisterType((*NftDenomRequest)(nil), "cosmosgaminghub.nibiru.nft.NftDenomRequest")
	proto.RegisterType((*DenomRequest)(nil), "cosmosgaminghub.nibiru.nft.DenomRequest")
	proto.RegisterType((*DenomQuery)(nil), "cosmosgaminghub.nibiru.nft.DenomQuery")
}

func init() { proto.RegisterFile("nft/wasm_request.proto", fileDescriptor_38d37e3479c5d69b) }

var fileDescriptor_38d37e3479c5d69b = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0xbb, 0x88, 0x5f, 0x51, 0x28, 0x54, 0x11, 0x29, 0xb2, 0xca, 0x1e, 0xa4, 0x08, 0x66,
	0xa8, 0xde, 0x4a, 0x4f, 0xc5, 0x83, 0x82, 0x0a, 0xee, 0xd1, 0x4b, 0xc9, 0xb6, 0xd9, 0x18, 0x68,
	0x32, 0xdb, 0x4d, 0x56, 0xed, 0x5b, 0xf8, 0x58, 0x1e, 0x7b, 0xf4, 0x24, 0xd2, 0xbe, 0x81, 0x4f,
	0x20, 0x49, 0xea, 0xd7, 0x41, 0xbc, 0x4d, 0x66, 0xe6, 0xff, 0xcb, 0x8f, 0x84, 0xec, 0xe8, 0xdc,
	0xc2, 0x03, 0x33, 0xaa, 0x5f, 0xf2, 0x71, 0xc5, 0x8d, 0xa5, 0x45, 0x89, 0x16, 0x1b, 0xcd, 0x01,
	0x1a, 0x85, 0x46, 0x30, 0x25, 0xb5, 0xb8, 0xab, 0x32, 0xaa, 0x65, 0x26, 0xcb, 0x8a, 0xea, 0xdc,
	0x36, 0xb7, 0x05, 0x0a, 0xf4, 0x6b, 0xe0, 0xaa, 0x90, 0x68, 0xee, 0x09, 0x44, 0x31, 0xe2, 0xc0,
	0x0a, 0x09, 0x4c, 0x6b, 0xb4, 0xcc, 0x4a, 0xd4, 0x66, 0x31, 0x3d, 0x0a, 0x3c, 0xc8, 0x98, 0xe1,
	0x30, 0xae, 0x78, 0x39, 0x81, 0xfb, 0x76, 0xc6, 0x2d, 0x6b, 0x43, 0xc1, 0x84, 0xd4, 0x7e, 0x39,
	0xec, 0x26, 0x57, 0xa4, 0x7e, 0x9d, 0xdb, 0x33, 0xae, 0x51, 0xa5, 0x41, 0xaa, 0xd1, 0x21, 0x4b,
	0x3a, 0xb7, 0xbb, 0xd1, 0x41, 0xd4, 0xda, 0x38, 0x69, 0xd1, 0xbf, 0xe5, 0xe8, 0xcf, 0x58, 0xea,
	0x42, 0xc9, 0x25, 0xd9, 0xfc, 0xc5, 0xea, 0x92, 0xe5, 0xa1, 0x3b, 0x2f, 0x68, 0x87, 0xff, 0xd2,
	0x6e, 0x9c, 0x6e, 0x1a, 0x42, 0x49, 0x97, 0x90, 0xef, 0x66, 0x83, 0x92, 0x35, 0xdf, 0xee, 0xcb,
	0xa1, 0xc7, 0xad, 0xf7, 0xb6, 0xde, 0x5f, 0xf7, 0xeb, 0x13, 0xa6, 0x46, 0x9d, 0xe4, 0x73, 0x92,
	0xa4, 0xab, 0xbe, 0xbc, 0x18, 0xf6, 0xce, 0x9f, 0x67, 0x71, 0x34, 0x9d, 0xc5, 0xd1, 0xdb, 0x2c,
	0x8e, 0x9e, 0xe6, 0x71, 0x6d, 0x3a, 0x8f, 0x6b, 0x2f, 0xf3, 0xb8, 0x76, 0x4b, 0x85, 0xb4, 0xee,
	0xf2, 0x01, 0x2a, 0x08, 0x42, 0xc7, 0x5f, 0x46, 0x10, 0x8c, 0xe0, 0x11, 0xdc, 0x6f, 0xd9, 0x49,
	0xc1, 0x4d, 0xb6, 0xe2, 0xdf, 0xea, 0xf4, 0x23, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xe1, 0xd1, 0x6f,
	0xc1, 0x01, 0x00, 0x00,
}

func (m *NftDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denom != nil {
		{
			size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWasmRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintWasmRequest(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovWasmRequest(uint64(l))
	}
	return n
}

func (m *DenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Denom != nil {
		l = m.Denom.Size()
		n += 1 + l + sovWasmRequest(uint64(l))
	}
	return n
}

func (m *DenomQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovWasmRequest(uint64(l))
	}
	return n
}

func sovWasmRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmRequest(x uint64) (n int) {
	return sovWasmRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &DenomRequest{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denom == nil {
				m.Denom = &DenomQuery{}
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmRequest = fmt.Errorf("proto: unexpected end of group")
)
